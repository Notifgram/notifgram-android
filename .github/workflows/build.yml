name: Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: #[ "test-github-actions", "main" ]
  pull_request:
    branches: #[ "test-github-actions", "main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
#Defines rules to prevent multiple workflow runs from overlapping.
concurrency:
  group: build-${{ github.ref }}
  #- If a new run is triggered for the same group while another is still running, the older run is automatically cancelled.
  cancel-in-progress: true

#It makes the workflow run with the least required access
permissions:
  contents: write
  pull-requests: write
  security-events: write
      
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test_and_apk:
    name: "Local tests and APKs"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      security-events: write

    timeout-minutes: 60

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

        # 1. Checkout the repo. Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        #- By default, when a workflow starts, the runner (the virtual machine/container executing your job) does not have your repositoryâ€™s code.
        # clones your repository into the runnerâ€™s workspace so subsequent steps (like building, testing, or deploying) can access the code.
        # It checks out the commit that triggered the workflow (so youâ€™re always working with the right version of the code).
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Copy CI gradle.properties
        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
       # with:
       #   cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
       #- Automatically publishes a Gradle Build Scan after each build.
       #   build-scan-publish: true
       #   build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
        #  build-scan-terms-of-use-agree: "yes"

      - name: Check build-logic
        run: ./gradlew :build-logic:convention:check

      # Run local tests after screenshot tests to avoid wrong UP-TO-DATE. TODO: Ignore screenshots.
      - name: Run local tests
        run: ./gradlew testDebug #:lint:test

      - name: Build all build type and flavor permutations
        run: ./gradlew :app:assemble -PminifyWithR8=true

      - name: Upload build outputs (APKs)
        uses: actions/upload-artifact@v4
        with:
          name: APKs
          path: '**/build/outputs/apk/**/*.apk'

      - name: Upload JVM local results (XML)
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: local-test-results
          path: '**/build/test-results/test*UnitTest/**.xml'

      - name: Check lint
        run: ./gradlew :app:lintRelease #:lint:lint

      - name: Upload lint reports (HTML)
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports
          path: '**/build/reports/lint-results-*.html'

      - name: Upload lint reports (SARIF) for app module
        if: ${{ !cancelled() && hashFiles('app/**/*.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: './app/'
          category: app

      - name: Upload lint reports (SARIF) for app-nia-catalog module
        if: ${{ !cancelled() && hashFiles('app-nia-catalog/**/*.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: './app-nia-catalog/'
          category: app-nia-catalog

      - name: Upload lint reports (SARIF) for lint module
        if: ${{ !cancelled() && hashFiles('lint/**/*.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: './lint/'
          category: lint

  androidTest:
    runs-on: ubuntu-latest
    timeout-minutes: 55
    strategy:
      matrix:
        api-level: [ 30 ]

    steps:
      - name: Delete unnecessary tools ðŸ”§
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: false # Don't remove Android tools
          tool-cache: true # Remove image tool cache - rm -rf "$AGENT_TOOLSDIRECTORY"
          dotnet: true # rm -rf /usr/share/dotnet
          haskell: true # rm -rf /opt/ghc...
          swap-storage: true # rm -f /mnt/swapfile (4GiB)
          docker-images: false # Takes 16s, enable if needed in the future
          large-packages: false # includes google-cloud-sdk and it's slow

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          ls /dev/kvm

      - name: Checkout
        uses: actions/checkout@v4

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Copy CI gradle.properties
        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"

      # By ChatGpt: build app APK and the test APK, so they will be ready to be used for
      # instrumentation test. otherwise, instrumentation test fails as Github actions
      # virtual machine are now not strong enough to build and run emulator at the same time.
      - name: Build APKs
        run: ./gradlew assembleDebug assembleDebugAndroidTest --no-daemon

      - name: Build projects and run instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          disable-animations: true
          disk-size: 6000M
          heap-size: 1024M
          ram-size: 4096M #Added by ChatGpt after an error happened.
          emulator-options: -no-snapshot -no-window -gpu swiftshader_indirect
          script: ./gradlew connectedDebugAndroidTest --no-daemon

      - name: Run local tests (including Roborazzi) for the combined coverage report (only API 30)
        if: matrix.api-level == 30
        # There is no need to verify Roborazzi tests to generate coverage.
        run: ./gradlew testDebugUnitTest -Proborazzi.test.verify=false # Add Prod if we ever add JVM tests for prod

      # Add `createProdDebugUnitTestCoverageReport` if we ever add JVM tests for prod
      - name: Generate coverage reports for Debug variants (only API 30)
        if: matrix.api-level == 30
        run: ./gradlew createDebugCombinedCoverageReport

      - name: Upload test reports
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.api-level }}
          path: '**/build/reports/androidTests'

      - name: Display local test coverage (only API 30)
        if: matrix.api-level == 30
        id: jacoco
        uses: madrapps/jacoco-report@v1.7.1
        with:
          title: Combined test coverage report
          min-coverage-overall: 40
          min-coverage-changed-files: 60
          paths: |
            ${{ github.workspace }}/**/build/reports/jacoco/**/*Report.xml
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload local coverage reports (XML + HTML) (only API 30)
        if: matrix.api-level == 30
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          if-no-files-found: error
          compression-level: 1
          overwrite: false
          path: '**/build/reports/jacoco/'
